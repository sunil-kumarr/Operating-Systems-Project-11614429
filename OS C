
#include < stdio.h >

  struct process_structure {

    int process_id, arrival_time, burst_time, priority;

    int q, ready;

  };

int main() {
    int limit, count;
    int time_quantum;
    printf("Queue Level 1 : Fixed priority preemptive Scheduling\nQueue Level 2:Round Robin Scheduling\n\n");

    printf("Enter Total Number of Processes:\t");
    scanf("%d", & limit);

    printf("Enter Time Quantum for Round Robin: ");
    scanf("%d", & time_quantum);
    struct process_structure p1[limit];
    struct process_structure p2[limit];

    int flag = 1;
    int Qlevel;
    int q1 = 0, q2 = 0;

    //Enter Process Details Here	
    for (count = 0; count < limit; count++) {
      while (flag) {
        printf("\nLevel[1/2]:  \t");
        scanf("%d", & Qlevel);
        if (Qlevel == 1 || Qlevel == 2) {
          break;
        }
        printf("!! Enter Level Again !!");
      }

      if (Qlevel == 1) {
        printf("Process ID       : ");
        scanf("%d", & p1[q1].process_id);

        printf("Arrival Time     : ");
        scanf("%d", & p1[q1].arrival_time);

        printf("Burst Time       : ");
        scanf("%d", & p1[q1].burst_time);

        printf("Process Priority : ");
        scanf("%d", & p1[q1].priority);
        q1++;
      } else {
        printf("Process ID       : ");
        scanf("%d", & p2[q2].process_id);

        printf("Arrival Time     : ");
        scanf("%d", & p2[q2].arrival_time);

        printf("Burst Time       : ");
        scanf("%d", & p2[q2].burst_time);
        q2++;

      }
    }
    //////////////////////////////////////////////////
    int i, j;
    struct process_structure temp;
    for (i = 1; i < q1; i++)
      for (j = 0; j < q1 - i; j++) {
        if (p1[j].arrival_time > p1[j + 1].arrival_time) {
          temp = p1[j];
          p1[j] = p1[j + 1];
          p1[j + 1] = temp;
        }
      }

    for (i = 0; i < q1; i++) {
      printf("\nProcess ID:%d\t Arrival Time:%d \tPriority: %d\tBurst Time:%d", p1[i].process_id, p1[i].arrival_time, p1[i].priority, p1[i].burst_time);
      "}

      i = 0;
      int run;
      for (run = 0;; run++) {
        if (q1 == 0) {
          break;
        }
        if (p1[i].priority > p1[i + 1].priority && p1[i + 1].arrival_time == run) {

          p2[q2] = p1[i];
          p2[q2].arrival_time = run + 1;
          printf("\n----------------------------------------\n");
          printf("process %d is moved to Queue 2\n--------------------------------------\n", p1[i].process_id);
          q1--;
          q2++;
          //premepts previous process
          i++;
        }
        if (p1[i].arrival_time <= run && p1[i].burst_time != 0) {
          p1[i].burst_time--;
          printf("\nProcess ID:%d  Priority: %d Burst Time %d time %d", p1[i].process_id, p1[i].priority, p1[i].burst_time, run);

        } else if (p1[i].burst_time == 0) {

          printf("\n---------------------------------------------------\n");
          printf("process %d Finised\n-------------------------------------------------", p1[i].process_id);
          q1--;
          i++;
        }

      }
      for (i = 1; i < q2; i++)
        for (j = 0; j < q2 - i; j++) {
          if (p2[j].arrival_time > p2[j + 1].arrival_time) {
            temp = p2[j];
            p2[j] = p2[j + 1];
            p2[j + 1] = temp;
          }
        }
    }
    for (i = 0; i < q2; i++) {
      printf("\nProcess ID:%d\t Arrival Time:%d \tPriority: %d\tBurst Time:%d", p2[i].process_id, p2[i].arrival_time, p2[i].priority, p2[i].burst_time);
    }

    //////////////////
    //mainEnd here
  }
  ////////////
